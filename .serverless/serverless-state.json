{
  "service": {
    "service": "s3-signed-urls",
    "serviceObject": {
      "name": "s3-signed-urls"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "environment": {
        "AWS_BUCKET_NAME": "s3-bucket-operations",
        "METADATA_TABLE": "s3-objects-metadata"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:DeleteObject",
            "dynamodb:PutItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:s3:::s3-bucket-operations",
            "arn:aws:s3:::s3-bucket-operations/*",
            "arn:aws:dynamodb:us-east-1:*:table/s3-objects-metadata"
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetSignedUrlUploadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/s3-signed-urls-dev-getSignedUrlUpload"
            }
          },
          "GetSignedUrlGetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/s3-signed-urls-dev-getSignedUrlGet"
            }
          },
          "Saves3metadataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/s3-signed-urls-dev-saves3metadata"
            }
          },
          "Deletes3objectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/s3-signed-urls-dev-deletes3object"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "s3-signed-urls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/s3-signed-urls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/s3-signed-urls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "s3-signed-urls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetSignedUrlUploadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-7622eca5-bbf7",
                "S3Key": "serverless/s3-signed-urls/dev/1758727428355-2025-09-24T15:23:48.355Z/s3-signed-urls.zip"
              },
              "Handler": "handler.getSignedUrlUpload",
              "Runtime": "nodejs18.x",
              "FunctionName": "s3-signed-urls-dev-getSignedUrlUpload",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_BUCKET_NAME": "s3-bucket-operations",
                  "METADATA_TABLE": "s3-objects-metadata"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSignedUrlUploadLogGroup"
            ]
          },
          "GetSignedUrlGetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-7622eca5-bbf7",
                "S3Key": "serverless/s3-signed-urls/dev/1758727428355-2025-09-24T15:23:48.355Z/s3-signed-urls.zip"
              },
              "Handler": "handler.getSignedUrlGet",
              "Runtime": "nodejs18.x",
              "FunctionName": "s3-signed-urls-dev-getSignedUrlGet",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_BUCKET_NAME": "s3-bucket-operations",
                  "METADATA_TABLE": "s3-objects-metadata"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSignedUrlGetLogGroup"
            ]
          },
          "Saves3metadataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-7622eca5-bbf7",
                "S3Key": "serverless/s3-signed-urls/dev/1758727428355-2025-09-24T15:23:48.355Z/s3-signed-urls.zip"
              },
              "Handler": "handler.saveMetadata",
              "Runtime": "nodejs18.x",
              "FunctionName": "s3-signed-urls-dev-saves3metadata",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_BUCKET_NAME": "s3-bucket-operations",
                  "METADATA_TABLE": "s3-objects-metadata"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "Saves3metadataLogGroup"
            ]
          },
          "Deletes3objectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-7622eca5-bbf7",
                "S3Key": "serverless/s3-signed-urls/dev/1758727428355-2025-09-24T15:23:48.355Z/s3-signed-urls.zip"
              },
              "Handler": "handler.deletes3object",
              "Runtime": "nodejs18.x",
              "FunctionName": "s3-signed-urls-dev-deletes3object",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_BUCKET_NAME": "s3-bucket-operations",
                  "METADATA_TABLE": "s3-objects-metadata"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "Deletes3objectLogGroup"
            ]
          },
          "GetSignedUrlUploadLambdaVersionrmOC0HmGA6JLHtbN6qB9BSECpU8CzgAairorXN3GbI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSignedUrlUploadLambdaFunction"
              },
              "CodeSha256": "yhOSA691ptBeLyTnjfFSykSWE+SSQahWHjn4EdQvj0Y="
            }
          },
          "GetSignedUrlGetLambdaVersionrDSgyHiqpEaJBvrTmDTjVq934pbgziQZo9SOru9XF4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSignedUrlGetLambdaFunction"
              },
              "CodeSha256": "yhOSA691ptBeLyTnjfFSykSWE+SSQahWHjn4EdQvj0Y="
            }
          },
          "Saves3metadataLambdaVersionOlfgTGFGyT8PwwpHo2tMiXMlrG2M3WZWoEbi5BhL8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "Saves3metadataLambdaFunction"
              },
              "CodeSha256": "yhOSA691ptBeLyTnjfFSykSWE+SSQahWHjn4EdQvj0Y="
            }
          },
          "Deletes3objectLambdaVersionWyKSv2SLkIljnasJgetnb8iRj8xmF5Fi10kkLRz4Eaw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "Deletes3objectLambdaFunction"
              },
              "CodeSha256": "yhOSA691ptBeLyTnjfFSykSWE+SSQahWHjn4EdQvj0Y="
            }
          },
          "Saves3metadataCustomS31": {
            "Type": "Custom::S3",
            "Version": "1.0",
            "DependsOn": [
              "Saves3metadataLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "s3-signed-urls-dev-saves3metadata",
              "BucketName": "s3-bucket-operations",
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectCreated:Put",
                  "Rules": []
                }
              ]
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "s3-signed-urls",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/s3-signed-urls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/s3-signed-urls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              "s3-bucket-operations"
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "*"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashs3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-7622eca5-bbf7",
                "S3Key": "serverless/s3-signed-urls/dev/1758727428355-2025-09-24T15:23:48.355Z/custom-resources.zip"
              },
              "FunctionName": "s3-signed-urls-dev-custom-resource-existing-s3",
              "Handler": "s3/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs20.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution",
              "CustomDashresourceDashexistingDashs3LogGroup"
            ]
          },
          "CustomDashresourceDashexistingDashs3LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/s3-signed-urls-dev-custom-resource-existing-s3"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-s3-signed-urls",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUploadDashurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "upload-url",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-url",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete-file",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashfileIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeleteDashfile"
              },
              "PathPart": "{id+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadDashurlPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSignedUrlUploadLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSignedUrlUploadLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashurlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSignedUrlGetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSignedUrlGetLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteDashfileIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteDashfileIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "Deletes3objectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "Deletes3objectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1758727402516": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUploadDashurlPost",
              "ApiGatewayMethodGetDashurlGet",
              "ApiGatewayMethodDeleteDashfileIdVarDelete"
            ]
          },
          "GetSignedUrlUploadLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSignedUrlUploadLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSignedUrlGetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSignedUrlGetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "Deletes3objectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "Deletes3objectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FilesMetaDataTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "s3-objects-metadata",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-7622eca5-bbf7",
            "Export": {
              "Name": "sls-s3-signed-urls-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetSignedUrlUploadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSignedUrlUploadLambdaVersionrmOC0HmGA6JLHtbN6qB9BSECpU8CzgAairorXN3GbI"
            },
            "Export": {
              "Name": "sls-s3-signed-urls-dev-GetSignedUrlUploadLambdaFunctionQualifiedArn"
            }
          },
          "GetSignedUrlGetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSignedUrlGetLambdaVersionrDSgyHiqpEaJBvrTmDTjVq934pbgziQZo9SOru9XF4"
            },
            "Export": {
              "Name": "sls-s3-signed-urls-dev-GetSignedUrlGetLambdaFunctionQualifiedArn"
            }
          },
          "Saves3metadataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "Saves3metadataLambdaVersionOlfgTGFGyT8PwwpHo2tMiXMlrG2M3WZWoEbi5BhL8"
            },
            "Export": {
              "Name": "sls-s3-signed-urls-dev-Saves3metadataLambdaFunctionQualifiedArn"
            }
          },
          "Deletes3objectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "Deletes3objectLambdaVersionWyKSv2SLkIljnasJgetnb8iRj8xmF5Fi10kkLRz4Eaw"
            },
            "Export": {
              "Name": "sls-s3-signed-urls-dev-Deletes3objectLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-s3-signed-urls-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getSignedUrlUpload": {
        "handler": "handler.getSignedUrlUpload",
        "events": [
          {
            "http": {
              "path": "upload-url",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "s3-signed-urls-dev-getSignedUrlUpload",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSignedUrlUploadLambdaVersionrmOC0HmGA6JLHtbN6qB9BSECpU8CzgAairorXN3GbI"
      },
      "getSignedUrlGet": {
        "handler": "handler.getSignedUrlGet",
        "events": [
          {
            "http": {
              "path": "get-url",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "s3-signed-urls-dev-getSignedUrlGet",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSignedUrlGetLambdaVersionrDSgyHiqpEaJBvrTmDTjVq934pbgziQZo9SOru9XF4"
      },
      "saves3metadata": {
        "handler": "handler.saveMetadata",
        "events": [
          {
            "s3": {
              "bucket": "s3-bucket-operations",
              "existing": true,
              "event": "s3:ObjectCreated:Put"
            }
          }
        ],
        "name": "s3-signed-urls-dev-saves3metadata",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "Saves3metadataLambdaVersionOlfgTGFGyT8PwwpHo2tMiXMlrG2M3WZWoEbi5BhL8"
      },
      "deletes3object": {
        "handler": "handler.deletes3object",
        "events": [
          {
            "http": {
              "path": "delete-file/{id+}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "s3-signed-urls-dev-deletes3object",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "Deletes3objectLambdaVersionWyKSv2SLkIljnasJgetnb8iRj8xmF5Fi10kkLRz4Eaw"
      }
    },
    "resources": {
      "Resources": {
        "FilesMetaDataTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "s3-objects-metadata",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "s3-signed-urls",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\KKT\\Desktop\\s3 services\\.serverless\\s3-signed-urls.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/s3-signed-urls/dev/1758727428355-2025-09-24T15:23:48.355Z",
    "artifact": "s3-signed-urls.zip"
  }
}